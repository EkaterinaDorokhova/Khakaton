Пути реализации продукта
Использованная в данном проекте модель машинного обучения ArchiStyles была изначально обучена на 9 стилях. Для того, чтобы продемонстрировать возможности развития модели, она дополнительно была дообучена командой на ещё двух стилях (Чикагская школа и Эдвардианский стиль). Таким образом, разработанная модель может определять 11 распространенных в Западной и Центральной Европе архитектурных стилей.

Art Nouveau (Модерн)
Baroque (Барокко)
Beaux-Arts (Бозар)
Byzantine (Византийская)
Chicago school (Чикагская архитектурная школа)
Deconstructivism (Деконструктивизм)
Edwardian (Эдвардианская архитектура)
Gothic (Готика)
Palladian (Палладианство)
Postmodern (Постмодернизм)
Romanesque (Романская архитектура).
Выбор данных стилей был связан с доступностью этих наборов данных для обучения модели. При наличии ресурсов (в первую очередь, людей в команде и времени), более глубоко погружения в процесс сбора данных и выполнения ряда дополнительных шагов, модель может быть существенно доработана.

Актуальная версия модели имеет ряд ограничений, на устранение которые могут быть направлены будущие доработки:

1) Модель может ошибаться при определении стиля - точность определения стилей модели может быть достигнута за счёт ...

2) Модель не распознает стили, которые не входят в список 11 обученных стилей - расширение списка стилей, а также географическая локализация.

3) Трудности при работе со смешанными стилями - в случае, если модель сталкивается с изображением здания, которое нельзя однозначно отнести одному из стилей (эклектика, фьюжн), то модель, вероятно выдаст неверный ответ, т.к. её задачей является дать ответ, наиболее приближенный. Решением было бы изменить формат ответов модели таким образом, чтобы она сообщала о своей "неуверенности" в определении стиля. В таком случае более корректным было бы ответить, что здание на фото относится к тем или иным стилям с некоторой вероятностью (например, "Здание не является типичным представителей какого-либо одного архитектурного направления и имеет признаки нескольких стилей: с вероятностью 60% можно заключить, что оно относится к архетиктурной школе модерна, и 40%, что перед нами уже представитель постмодерна").

Решением перечисленных ограничений может быть переход к реализации продукта с развёртыванием модели YOLOv5 на ресурсах и в собственном окружении создателей продукта, т.к. YOLOv5 сама по себе является моделью машинного обучения, а не библиотекой или инструментом, и может быть использована непосредственно без применения инструментов-посредников. На данный момент модель реализована с использованием Roboflow: платформы для разметки данных, создания датасетов и обучения моделей машинного обучения, что имеет как свои преимущества, так и недостатки. Использование Roboflow не является обязательным инструментом для реализации проекта.

Преимущества использования Roboflow:

1) Удобный интерфейс: Roboflow предоставляет интуитивно понятный веб-интерфейс для разметки изображений, создания датасетов и обучения моделей машинного обучения.

2) Автоматическая аугментация: платформа позволяет легко применять различные методы аугментации данных, что увеличивает разнообразие обучающего набора и улучшает качество модели.

3) Экспорт данных в различных форматах: Roboflow поддерживает экспорт датасетов в различных форматах, включая YOLO, COCO и Pascal VOC, что делает его совместимым с широким спектром моделей машинного обучения.

4) Хостинг датасетов и моделей: Roboflow позволяет хранить датасеты и обученные модели в облаке, предоставляя к ним удобный доступ через API.

5) Интеграция с YOLOv5: Roboflow имеет прямую интеграцию с YOLOv5, что значительно упрощает процесс обучения и развертывания модели.

В целом, использование Roboflow значительно упрощает процесс разработки проекта, особенно для тех, кто не имеет большого опыта в области машинного обучения. Однако, при наличии необходимых знаний и опыта, проект можно успешно реализовать и без использования Roboflow, что существенно расширит возможности изменения настроек модели под нужды, цели и задачи авторов проекта.

Реализация проекта без Roboflow
При самостоятельном развертывании модели, открывает ряд возможностей, недоступных при использовании готовых платформ:

1) Полный контроль над процессом обучения. Вы можете самостоятельно выбирать архитектуру модели, настраивать гиперпараметры, определять методы аугментации данных и контролировать весь процесс обучения. Это дает большую гибкость в оптимизации модели под ваши специфические потребности.

2) Возможность использования любых данных и инструментов. Вы не ограничены рамками платформы Roboflow и можете использовать любые доступные данные и инструменты для разметки, аугментации и обучения модели. Вы можете использовать специализированные датасеты, собранные вами самостоятельно, или же комбинировать данные из различных источников.

3) Глубокое понимание процесса машинного обучения. Самостоятельная реализация проекта дает возможность глубже понять принципы работы моделей машинного обучения, тонкости настройки гиперпараметров и выбора оптимальной архитектуры.

4) Свобода в выборе способа развертывания. Вы можете развернуть модель на любом сервере, в облаке или локально, в зависимости от требований вашего приложения. Это открывает возможности для интеграции модели в существующие системы или создания новых приложений с уникальной функциональностью.

5) Потенциал для оптимизации производительности. Вы можете оптимизировать модель и код для достижения максимальной скорости инференса, что особенно важно для приложений, требующих обработки данных в реальном времени.

6) Независимость от сторонних платформ. Вы не зависите от ограничений и политики сторонних платформ, что дает большую свободу в использовании и распространении модели.

Важно отметить, что самостоятельная реализация проекта требует значительно больше усилий, технических знаний и времени. Необходимо глубоко разобраться в принципах машинного обучения, выбрать и настроить подходящие инструменты, а также обеспечить стабильную работу модели после развертывания.

В частности самостоятельное развертывание модели откроет широкие возможности для масштабирования проекта и позволит расширить его функциональность. В целом, самостоятельное развертывание модели даёт полный контроль над проектом и позволяет масштабировать его в соответствии с целями и ресурсами.

1. Масштабирование датасета:

А) Увеличение объёма данных повысит точность модели и её способность к обобщению.

Б) Добавление новых архитектурных стилей позволит расширить возможности модели, в том числе более редкие и связанные с определёнными регионами. В будщем это позволит добавить локализацию по городам,

В) Создание специализированных моделей для разных городов позволит учитывать особенности местной архитектуры.

2. Масштабирование архитектуры и функциональности:

А) Экспериментирование с архитектурами моделей позволит выбирать и настраивать архитектуру модели, например, YOLOv5, оптимизируя её под задачи.

Б) Реализация multi-label классификации: Вместо одного доминирующего стиля можно определять несколько стилей, присутствующих на изображении.

В) Интеграция с другими приложениями: API модели позволит интегрировать её в различные приложения, такие как веб-сервисы, мобильные приложения или Telegram-боты.

Г) Оптимизация производительности: настройка параметров модели и серверного окружения позволит добиться высокой скорости инференса.

Возможность тонкой настройки гиперпараметров и выбора оптимальной архитектуры при самостоятельном развёртывании модели, даёт значительную гибкость в процессе её обучения и, как следствие, позволяет максимально адаптировать модель к конкретной задаче.

Гиперпараметры - это параметры, которые не изучаются моделью напрямую, а задаются вручную перед началом обучения. Их тонкая настройка и выбор оптимальной архитектуры дают возможность создать модель, максимально адаптированную к конкретной задаче и данным, достичь наилучших показателей точности и скорости работы, предотвратить переобучение, эффективно использовать доступные вычислительные ресурсы, что в конечном итоге, повысит эффективность решения задач, стоящих перед продуктом. Тонкая настройка этих параметров позволяет улучшить качество модели, ускорить процесс обучения и .

При самостоятельном развёртывании модели будет доступна тонкая настройка следующих параметров:

1) Скорость обучения (learning rate): скорость, с которой модель обновляет свои веса в процессе обучения.

2) Размер батча (batch size): количество изображений, обрабатываемых моделью за одну итерацию.

3) Количество эпох (epochs): сколько раз модель проходит по всему набору данных в процессе обучения.

4) Оптимизатор (optimizer): алгоритм, используемый для обновления весов модели.

Также дополнительную гибкость в настройке модели под конкретную задачудаёт возможность изменения архитектуры, которая структуру модели и набор слоев.

5) Выбор оптимальной архитектуры зависит от сложности задачи, объёма данных и доступных вычислительных ресурсов.

6) Использование предобученных весов моделей, таких как YOLOv5, ускоряет процесс обучения и повышает точность, поскольку эти веса уже содержат знания, полученные на большом объеме данных.

Чтобы изменить содержимое ячейки, дважды нажмите на нее (или выберите "Ввод")

Важно помнить, что масштабирование проекта требует дополнительных усилий, связанных с управлением данными, обучением модели и поддержкой инфраструктуры.

Реализация продукта без Roboflow потребует ряд изменений:

1) Ручная разметка данных: при отказе от Roboflow разработчикам продукта придётся вручную размечать изображения, используя инструменты типа LabelImg или CVAT.

2) Самостоятельная аугментация: понадобится самостоятельно реализовать и применять методы аугментации данных.

3) Форматирование датасета: разработчики продукта будут ответственны за преобразование датасета в формат, подходящий для обучения YOLOv5.

4) Настройка окружения: потребуется настройка собственного окружения для обучения модели, включая установку необходимых библиотек и фреймворков, а также обеспечение доступа к GPU.

5) Развёртывание модели: владельцам продукта придётся самостоятельно разобраться с развёртыванием модели локально или в облаке.

5)

План реализации проекта ArchiStyles без Roboflow при самостоятельном развертывании всех сервисов
1. Определение требований и целей:

Четко сформулировать цели проекта: какие архитектурные стили нужно определять, какая точность модели необходима, какая скорость инференса требуется.
Определить целевую аудиторию и способы взаимодействия с моделью: веб-интерфейс, мобильное приложение, API, интеграция с другими сервисами.
Оценить доступные ресурсы: бюджет, команда специалистов, вычислительные мощности.
2. Сбор и подготовка данных:

Сбор данных:
Собрать большой и разнообразный набор изображений, представляющих разные архитектурные стили.
Использовать различные источники: фотостоки, архитектурные сайты, социальные сети.
Привлечь специалистов по архитектуре для проверки качества и репрезентативности данных.
Разметка данных:
Выбрать инструмент для ручной разметки: LabelImg, CVAT, makesense.ai.
Разметить изображения, указав bounding box для каждого здания и присвоив ему соответствующий стиль.
Обеспечить высокое качество разметки: точность, полнота, согласованность.
Рассмотреть возможность использования сервисов автоматической разметки для ускорения процесса.

[ ]
123456789101112131415161718192021222324
import os

# Пути к данным
data_dir = "/content/drive/MyDrive/Хакатон/data/data_for_model"  # Общая папка с данными
splits = ['train', 'valid', 'test']  # Три раздела данных

# Список классов и их ID
classes = sorted([d for d in os.listdir(os.path.join(data_dir, 'train')) if os.path.isdir(os.path.join(data_dir, 'train', d))])
class_to_id = {cls_name: i for i, cls_name in enumerate(classes)}
print(f"Классы и их ID: {class_to_id}")

